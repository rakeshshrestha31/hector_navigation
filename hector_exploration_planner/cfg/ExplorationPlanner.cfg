#! /usr/bin/env python
PACKAGE='hector_exploration_planner'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("security_constant", double_t, 0, "security_constant", 0.5, 0.0, 10000.0)
gen.add("min_obstacle_dist", int_t, 0, "min_obstacle_dist", 3, 0, 1000)
gen.add("plan_in_unknown", bool_t, 0, "plan_in_unknown", False)
gen.add("explore_close_to_path", bool_t, 0, "explore_close_to_path", False)
gen.add("use_inflated_obstacles", bool_t, 0, "use_inflated_obstacle", True)
gen.add("goal_angle_penalty", int_t, 0, "goal_angle_penalty", 50, 0, 10000)
gen.add("min_frontier_size", int_t, 0, "min_frontier_size", 5, 0, 1000)
gen.add("dist_for_goal_reached", double_t, 0, "dist_for_goal_reached", 0.25, 0.0, 10.0)
gen.add("same_frontier_distance", double_t, 0, "same_frontier_distance", 0.25, 0.0, 10.0)
gen.add("obstacle_cutoff_distance", double_t, 0, "obstacle_cutoff_distance", 1.0, 0.0, 100.0)
gen.add("use_observation_pose_calculation", bool_t, 0, "use observation pose calculation", True)
gen.add("observation_pose_desired_dist", double_t, 0, "Observation pose desired distance", 0.5, 0.0, 10.0)
gen.add("observation_pose_allowed_angle", double_t, 0, "allowed angle for observation pose adjustment [deg]", 135.0, 0.0, 360.0)
gen.add("close_to_path_target_distance", double_t, 0, "close to path exploration target distance", 1.2, 0.0, 10.0)

gen.add("frontier_neighbor_dist", int_t, 0, "the distance of two adjacent frontier points used for cluster", 3, 0, 10)
gen.add("min_frontier_cluster_size", int_t, 0, "minimal number of frontier points when consider it as a valid cluster", 2, 0, 100)
gen.add("min_frontier_to_obstacle_dist", int_t, 0, "min distance of a valid frontier to obstacle", 3, 0, 1000)

#info gain
gen.add("use_info_gain", bool_t, 0, "Use info gain service to initialize exploration transform map or not", False)

# smoothingd
gen.add("smoothing_enabled", bool_t, 0, "smoothing_enabled", True)
gen.add("smoothed_points_per_unit", int_t, 0, "smoothed_points_per_unit", 5, 1, 50)
gen.add("smoothed_points_throttle", int_t, 0, "smoothed_points_throttle", 0, 0, 50)
gen.add("smoothed_use_end_conditions", bool_t, 0, "smoothed_use_end_conditions", False)
gen.add("smoothed_use_middle_conditions", bool_t, 0, "smoothed_use_middle_conditions", False)

exit(gen.generate(PACKAGE, "hector_exploration_planner", "ExplorationPlanner"))
